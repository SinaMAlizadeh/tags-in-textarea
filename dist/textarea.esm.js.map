{"version":3,"file":"textarea.esm.js","sources":["../src/components/tagsButton/index.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/helper/index.ts","../src/components/textarea/hooks/useTextarea.ts","../src/components/textarea/textarea.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Tag } from \"../textarea/type\";\r\n\r\ninterface TagsButtonProps {\r\n  tag: Tag;\r\n  addToDiv: (e: Tag) => void;\r\n}\r\n\r\nfunction TagsButton({ tag, addToDiv }: TagsButtonProps) {\r\n  return (\r\n    <button type=\"button\" className=\"tags-button\" onClick={() => addToDiv(tag)}>\r\n      {tag.label}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default TagsButton;\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { Tag } from \"../components/textarea/type\";\r\n\r\nexport const TagsConvertWithValue = (\r\n  content: string,\r\n  tags: Array<Tag>\r\n): string => {\r\n  const htmlContent = content || \"\";\r\n  const tempDiv = document.createElement(\"div\");\r\n  tempDiv.innerHTML = htmlContent;\r\n\r\n  tags.forEach((tag) => {\r\n    const tagElements = Array.from(\r\n      tempDiv.getElementsByClassName(\"inserted-tag\")\r\n    );\r\n\r\n    tagElements.forEach((element) => {\r\n      // Check if the child span contains the label\r\n      const childSpan = element.querySelector(\"span\");\r\n      if (childSpan && childSpan.textContent?.replace(\"x\", \"\") === tag.label) {\r\n        const textNode = document.createTextNode(tag.value);\r\n        element.parentNode?.replaceChild(textNode, element);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Replace &nbsp; with a regular space\r\n  const contentTemp = tempDiv.innerHTML.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n  return contentTemp.replace(/&nbsp;/g, \" \");\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Tag } from \"../type\";\r\nimport { TagsConvertWithValue } from \"../../../helper\";\r\n\r\ninterface UseTextareaProps {\r\n  defaultValue: string;\r\n  tags: Array<Tag>;\r\n  setValue: (e: string) => void;\r\n}\r\n\r\nexport default function UseTextarea({\r\n  defaultValue,\r\n  tags,\r\n  setValue,\r\n}: UseTextareaProps) {\r\n  const chatBoxRef = useRef<HTMLDivElement>(null);\r\n\r\n  const handleContentChange = () => {\r\n    setValue(TagsConvertWithValue(chatBoxRef.current.innerHTML || \"\", tags));\r\n  };\r\n\r\n  const insertTagAtCaret = (tag: HTMLElement) => {\r\n    chatBoxRef.current?.focus();\r\n    const selection = window.getSelection();\r\n    if (selection) {\r\n      const range = selection.getRangeAt(0);\r\n      range.deleteContents();\r\n      const spanNode = document.createElement(\"span\");\r\n      spanNode.className = \"tag\";\r\n      spanNode.appendChild(tag);\r\n      spanNode.setAttribute(\"contenteditable\", \"false\");\r\n      spanNode.classList.add(\"inserted-tag\");\r\n      range.insertNode(spanNode);\r\n      range.collapse(false);\r\n      selection.removeAllRanges();\r\n      selection.addRange(range);\r\n    }\r\n    chatBoxRef.current?.focus();\r\n  };\r\n\r\n  const addToDiv = (tag: Tag) => {\r\n    const tagElement = document.createElement(\"span\");\r\n    tagElement.innerText = tag.label;\r\n    const removeButton = document.createElement(\"button\");\r\n    removeButton.innerText = \"x\";\r\n    removeButton.onclick = () => removeTag(tagElement.parentElement);\r\n    tagElement.appendChild(removeButton);\r\n    insertTagAtCaret(tagElement);\r\n    handleContentChange();\r\n  };\r\n\r\n  const removeTag = (spanNode: HTMLElement | null) => {\r\n    if (spanNode && spanNode.parentNode) {\r\n      spanNode.parentNode.removeChild(spanNode);\r\n      handleContentChange();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const currentChatBox = chatBoxRef.current;\r\n    if (currentChatBox) {\r\n      currentChatBox.innerHTML = defaultValue;\r\n      currentChatBox.addEventListener(\"input\", handleContentChange); // Listen for content changes\r\n    }\r\n\r\n    // Cleanup function to remove the event listener\r\n    return () => {\r\n      if (currentChatBox) {\r\n        currentChatBox.removeEventListener(\"input\", handleContentChange);\r\n      }\r\n    };\r\n  }, [defaultValue]);\r\n\r\n  return {\r\n    chatBoxRef,\r\n    addToDiv,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport \"../../components/textarea/textarea.style.css\";\r\nimport { Props, Tag } from \"./type\";\r\nimport TagsButton from \"../tagsButton\";\r\nimport UseTextarea from \"./hooks/useTextarea\";\r\n\r\nexport function Textarea({\r\n  dir = \"ltr\",\r\n  tags,\r\n  defaultValue = \"\",\r\n  setValue,\r\n}: Props) {\r\n  const { addToDiv, chatBoxRef } = UseTextarea({\r\n    defaultValue,\r\n    tags,\r\n    setValue,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"textarea-content\" dir={dir}>\r\n        <div className=\"tags-list-button\">\r\n          {tags.map((tag, index) => (\r\n            <TagsButton addToDiv={addToDiv} tag={tag} key={index} />\r\n          ))}\r\n        </div>\r\n        <div\r\n          id=\"chatBox\"\r\n          ref={chatBoxRef}\r\n          contentEditable\r\n          className=\"chatBox\"\r\n        ></div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["TagsButton","_a","tag","addToDiv","React","createElement","type","className","onClick","label","css","ref","insertAt","document","head","getElementsByTagName","style","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","TagsConvertWithValue","content","tags","htmlContent","tempDiv","innerHTML","forEach","Array","from","getElementsByClassName","element","childSpan","querySelector","textContent","replace","textNode","value","_b","parentNode","replaceChild","UseTextarea","defaultValue","setValue","chatBoxRef","useRef","handleContentChange","current","removeTag","spanNode","removeChild","useEffect","currentChatBox","addEventListener","removeEventListener","tagElement","innerText","removeButton","onclick","parentElement","focus","selection","window","getSelection","range","getRangeAt","deleteContents","setAttribute","classList","add","insertNode","collapse","removeAllRanges","addRange","insertTagAtCaret","Textarea","dir","_c","_d","Fragment","map","index","key","id","contentEditable"],"mappings":"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"}